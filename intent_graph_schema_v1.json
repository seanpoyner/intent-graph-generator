{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schema.intentgraph.ai/v1/intent-graph-schema.json",
  "title": "IntentGraph Schema v1.0",
  "description": "Standardized schema for AI agent orchestration intent graphs",
  "type": "object",
  "required": ["jsonrpc", "id", "result"],
  "properties": {
    "jsonrpc": {
      "type": "string",
      "const": "2.0",
      "description": "JSON-RPC version"
    },
    "id": {
      "type": ["string", "number", "null"],
      "description": "Request identifier matching the original request"
    },
    "result": {
      "type": "object",
      "required": ["intent_graph", "metadata", "validation"],
      "properties": {
        "intent_graph": {
          "type": "object",
          "required": ["nodes", "edges", "execution_plan"],
          "properties": {
            "nodes": {
              "type": "array",
              "minItems": 1,
              "description": "Array of agent execution nodes",
              "items": {
                "type": "object",
                "required": ["node_id", "agent_name", "node_type", "purpose", "inputs", "outputs"],
                "properties": {
                  "node_id": {
                    "type": "string",
                    "pattern": "^node_[a-z0-9_]+$",
                    "description": "Unique node identifier"
                  },
                  "agent_name": {
                    "type": "string",
                    "description": "Name of the agent to execute (must exist in available_agents)"
                  },
                  "agent_type": {
                    "type": "string",
                    "enum": ["llm", "tool", "api", "validator", "transformer", "aggregator", "router", "custom"],
                    "description": "Classification of agent type"
                  },
                  "node_type": {
                    "type": "string",
                    "enum": ["entry", "processing", "decision", "aggregation", "exit", "error_handler"],
                    "description": "Role of node in execution flow"
                  },
                  "purpose": {
                    "type": "string",
                    "minLength": 10,
                    "description": "Clear description of node's objective"
                  },
                  "inputs": {
                    "type": "object",
                    "description": "Input parameter mappings",
                    "patternProperties": {
                      "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                        "type": "object",
                        "required": ["source", "source_type"],
                        "properties": {
                          "source": {
                            "type": "string",
                            "description": "Source of the input value"
                          },
                          "source_type": {
                            "type": "string",
                            "enum": ["request", "node_output", "context", "constant", "environment"],
                            "description": "Type of input source"
                          },
                          "source_node": {
                            "type": "string",
                            "description": "Node ID if source_type is node_output"
                          },
                          "source_field": {
                            "type": "string",
                            "description": "Specific field from source"
                          },
                          "transformation": {
                            "type": "string",
                            "description": "Optional transformation to apply"
                          },
                          "default_value": {
                            "description": "Default value if source is unavailable"
                          },
                          "required": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether this input is required"
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "type": "array",
                    "minItems": 1,
                    "description": "Expected output definitions",
                    "items": {
                      "type": "object",
                      "required": ["name", "type", "description"],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Output field name"
                        },
                        "type": {
                          "type": "string",
                          "enum": ["string", "number", "boolean", "object", "array", "null"],
                          "description": "Data type of output"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of output content"
                        },
                        "schema": {
                          "type": "object",
                          "description": "JSON schema for complex types"
                        }
                      }
                    }
                  },
                  "configuration": {
                    "type": "object",
                    "description": "Agent-specific configuration parameters",
                    "properties": {
                      "timeout_ms": {
                        "type": "integer",
                        "minimum": 100,
                        "maximum": 300000,
                        "description": "Execution timeout in milliseconds"
                      },
                      "retry_policy": {
                        "type": "object",
                        "properties": {
                          "max_attempts": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 5
                          },
                          "backoff_strategy": {
                            "type": "string",
                            "enum": ["fixed", "exponential", "linear"]
                          },
                          "backoff_ms": {
                            "type": "integer",
                            "minimum": 100
                          }
                        }
                      },
                      "cache_policy": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean"
                          },
                          "ttl_seconds": {
                            "type": "integer"
                          },
                          "cache_key_fields": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "error_handling": {
                    "type": "object",
                    "properties": {
                      "strategy": {
                        "type": "string",
                        "enum": ["fail", "fallback", "skip", "retry"],
                        "default": "fail"
                      },
                      "fallback_node": {
                        "type": "string",
                        "description": "Node to execute on failure"
                      },
                      "error_output": {
                        "type": "string",
                        "description": "Field to store error information"
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "estimated_duration_ms": {
                        "type": "integer"
                      },
                      "cost_estimate": {
                        "type": "number"
                      },
                      "priority": {
                        "type": "string",
                        "enum": ["low", "normal", "high", "critical"]
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "edges": {
              "type": "array",
              "description": "Array of execution flow edges",
              "items": {
                "type": "object",
                "required": ["edge_id", "from_node", "to_node", "edge_type"],
                "properties": {
                  "edge_id": {
                    "type": "string",
                    "pattern": "^edge_[a-z0-9_]+$",
                    "description": "Unique edge identifier"
                  },
                  "from_node": {
                    "type": "string",
                    "description": "Source node ID"
                  },
                  "to_node": {
                    "type": "string",
                    "description": "Target node ID"
                  },
                  "edge_type": {
                    "type": "string",
                    "enum": ["sequential", "parallel", "conditional", "fallback", "retry", "iteration"],
                    "description": "Type of execution flow"
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition for conditional edges",
                    "properties": {
                      "expression": {
                        "type": "string",
                        "description": "Boolean expression to evaluate"
                      },
                      "evaluation_context": {
                        "type": "string",
                        "enum": ["node_output", "global_context", "both"]
                      }
                    }
                  },
                  "priority": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Execution priority when multiple edges available"
                  },
                  "data_mapping": {
                    "type": "object",
                    "description": "Explicit data transformations between nodes",
                    "patternProperties": {
                      "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                        "type": "object",
                        "properties": {
                          "from_field": {
                            "type": "string"
                          },
                          "to_field": {
                            "type": "string"
                          },
                          "transformation": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "execution_plan": {
              "type": "object",
              "required": ["entry_points", "exit_points", "execution_strategy"],
              "properties": {
                "entry_points": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string"
                  },
                  "description": "Node IDs where execution begins"
                },
                "exit_points": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string"
                  },
                  "description": "Node IDs where execution completes"
                },
                "execution_strategy": {
                  "type": "string",
                  "enum": ["sequential", "parallel", "hybrid", "adaptive"],
                  "description": "Overall execution strategy"
                },
                "parallel_groups": {
                  "type": "array",
                  "description": "Groups of nodes that can execute in parallel",
                  "items": {
                    "type": "object",
                    "required": ["group_id", "nodes"],
                    "properties": {
                      "group_id": {
                        "type": "string"
                      },
                      "nodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "execution_mode": {
                        "type": "string",
                        "enum": ["all", "any", "race", "fastest_n"],
                        "default": "all"
                      },
                      "fastest_n": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Number of fastest responses to wait for (if execution_mode is fastest_n)"
                      }
                    }
                  }
                },
                "critical_path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Longest dependency chain (bottleneck path)"
                },
                "total_estimated_steps": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Total number of execution steps"
                },
                "max_parallel_nodes": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum nodes executing simultaneously"
                },
                "iteration_config": {
                  "type": "object",
                  "description": "Configuration for iterative execution",
                  "properties": {
                    "max_iterations": {
                      "type": "integer",
                      "minimum": 1
                    },
                    "convergence_criteria": {
                      "type": "string",
                      "description": "Condition to stop iteration"
                    },
                    "iteration_nodes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Nodes involved in iteration loop"
                    }
                  }
                }
              }
            }
          }
        },
        "metadata": {
          "type": "object",
          "required": ["graph_id", "version", "created_at", "complexity_metrics"],
          "properties": {
            "graph_id": {
              "type": "string",
              "description": "Unique identifier for this graph instance"
            },
            "version": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+\\.\\d+$",
              "description": "Semantic version of graph format"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 timestamp of creation"
            },
            "agent_purpose": {
              "type": "string",
              "description": "Original high-level purpose"
            },
            "complexity_metrics": {
              "type": "object",
              "required": ["node_count", "edge_count", "depth", "complexity_score"],
              "properties": {
                "node_count": {
                  "type": "integer",
                  "minimum": 1
                },
                "edge_count": {
                  "type": "integer",
                  "minimum": 0
                },
                "depth": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum depth of execution tree"
                },
                "width": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum parallel nodes at any level"
                },
                "complexity_score": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100,
                  "description": "Overall complexity rating (1-100)"
                },
                "cyclomatic_complexity": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Number of independent paths through the graph"
                }
              }
            },
            "resource_estimates": {
              "type": "object",
              "properties": {
                "estimated_duration_ms": {
                  "type": "integer",
                  "description": "Estimated total execution time"
                },
                "estimated_cost": {
                  "type": "number",
                  "description": "Estimated execution cost in USD"
                },
                "estimated_tokens": {
                  "type": "integer",
                  "description": "Estimated total tokens consumed"
                },
                "estimated_api_calls": {
                  "type": "integer",
                  "description": "Estimated external API calls"
                }
              }
            },
            "optimization_notes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Suggestions for graph optimization"
            },
            "warnings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "severity": {
                    "type": "string",
                    "enum": ["low", "medium", "high"]
                  },
                  "message": {
                    "type": "string"
                  },
                  "node_id": {
                    "type": "string"
                  }
                }
              },
              "description": "Potential issues or concerns"
            }
          }
        },
        "validation": {
          "type": "object",
          "required": ["is_valid", "checks_performed"],
          "properties": {
            "is_valid": {
              "type": "boolean",
              "description": "Whether graph passed all validation checks"
            },
            "checks_performed": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["check_name", "passed"],
                "properties": {
                  "check_name": {
                    "type": "string"
                  },
                  "passed": {
                    "type": "boolean"
                  },
                  "message": {
                    "type": "string"
                  },
                  "details": {
                    "type": "object"
                  }
                }
              }
            },
            "validation_timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error_response": {
      "type": "object",
      "required": ["jsonrpc", "id", "error"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "const": "2.0"
        },
        "id": {
          "type": ["string", "number", "null"]
        },
        "error": {
          "type": "object",
          "required": ["code", "message"],
          "properties": {
            "code": {
              "type": "integer",
              "description": "Error code (-32768 to -32000 for JSON-RPC, -32000 to -32099 for custom)"
            },
            "message": {
              "type": "string",
              "description": "Human-readable error message"
            },
            "data": {
              "type": "object",
              "description": "Additional error information",
              "properties": {
                "details": {
                  "type": "string"
                },
                "received_params": {
                  "type": "object"
                },
                "validation_errors": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
